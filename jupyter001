{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "16447bb8",
   "metadata": {},
   "source": [
    "### 1. На складе лежат разные фрукты в разном количестве\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4eb8030f",
   "metadata": {},
   "outputs": [],
   "source": [
    "general_fruits = {'banana': 20, 'mango': 10, 'apple': 30}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe5acc6f",
   "metadata": {},
   "source": [
    "#### 1.1 Нужно написать функцию, которая на вход принимает любое количество названий фруктов и их количество, \n",
    "#### а возвращает общее количество фруктов на складе"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e16f0cfd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60\n"
     ]
    }
   ],
   "source": [
    "general = 0\n",
    " \n",
    "for item in general_fruits.values():\n",
    "    general += item\n",
    "print(general)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07d0669a",
   "metadata": {},
   "source": [
    "### 2. Дан список с затратами на рекламу. Но в данных есть ошибки, некоторые затраты имеют отрицательную величину. Удалите такие значения из списка и посчитайте суммарные затраты\n",
    "[100, 125, -90, 345, 655, -1, 0, 200]\n",
    "#### Используйте list comprehensions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "87935ab9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1425\n"
     ]
    }
   ],
   "source": [
    "array = [100, 125, -90, 345, 655, -1, 0, 200]\n",
    "list_comp = [a for a in array if a > 0]\n",
    "print(sum(list_comp))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3509e85",
   "metadata": {},
   "source": [
    "### 4. Даны два списка\n",
    "#### 4.1 Дата покупки\n",
    "['2021-09-14', '2021-12-15', '2021-09-08', '2021-12-05', '2021-10-09', '2021-09-30', '2021-12-22', '2021-11-29', '2021-12-24', '2021-11-26', '2021-10-27', '2021-12-18', '2021-11-09', '2021-11-23', '2021-09-27', '2021-10-02', '2021-12-27', '2021-09-20', '2021-12-13', '2021-11-01', '2021-11-09', '2021-12-06', '2021-12-08', '2021-10-09', '2021-10-31', '2021-09-30', '2021-11-09', '2021-12-13', '2021-10-26', '2021-12-09']\n",
    "#### 4.2 Суммы покупок по датам\n",
    "[1270, 8413, 9028, 3703, 5739, 4095, 295, 4944, 5723, 3701, 4471, 651, 7037, 4274, 6275, 4988, 6930, 2971, 6592, 2004, 2822, 519, 3406, 2732, 5015, 2008, 316, 6333, 5700, 2887]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "91e234fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "month = ['2021-09-14', '2021-12-15', '2021-09-08', '2021-12-05', '2021-10-09', '2021-09-30', '2021-12-22', '2021-11-29',\n",
    "        '2021-12-24', '2021-11-26', '2021-10-27', '2021-12-18', '2021-11-09', '2021-11-23', '2021-09-27', '2021-10-02',\n",
    "        '2021-12-27', '2021-09-20', '2021-12-13', '2021-11-01', '2021-11-09', '2021-12-06', '2021-12-08', '2021-10-09',\n",
    "        '2021-10-31', '2021-09-30', '2021-11-09', '2021-12-13', '2021-10-26', '2021-12-09']\n",
    "money = [1270, 8413, 9028, 3703, 5739, 4095, 295, 4944, 5723, 3701, 4471, 651, 7037, 4274, 6275, 4988, 6930, 2971, 6592,\n",
    "         2004, 2822, 519, 3406, 2732, 5015, 2008, 316, 6333, 5700, 2887]\n",
    " \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "823dab1f",
   "metadata": {},
   "source": [
    "#### 4.3 Найдите, какая выручка у компании в ноябре\n",
    "Используйте list comprehensions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "522f583f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25098\n"
     ]
    }
   ],
   "source": [
    "print(sum([m for d, m in zip(month, money) if d[5:7] == \"11\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f6cb726",
   "metadata": {},
   "source": [
    "#### Вставляем в ковычки в последней строке месяц (номер) числом и рассчитываем любой месяц !"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
